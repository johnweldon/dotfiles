#!/usr/bin/env bash

## Usage: execute_remote_command "command" "host1" "host2" ...
#
# Example
#
# updated="${1:?missing token}"
# hosts=(host1 host2)
#
# remote_command=$(
#  cat <<EOF
#  grep -qs 'GITHUB_TOKEN' ~/.local.bashrc && (
#    grep -qs 'GITHUB_TOKEN=${updated}' ~/.local.bashrc && (
#      echo "already up to date"
#    ) || (
#      echo "updating"
#      sed -i.bak -e 's/export GITHUB_TOKEN=.*/export GITHUB_TOKEN=${updated}/g' ~/.local.bashrc
#    )
#  ) || echo "skipping"
# EOF
#)
#
# execute_remote_command "${remote_command}" "${hosts[@]}"

function execute_remote_command {
  local remote_command="${1:-uptime}"
  shift || :
  local remote_hosts=("$@")
  local pids=()

  local keychain_init="${HOME}/.keychain/${HOSTNAME}-sh"
  # shellcheck disable=SC1090
  [ -f "${keychain_init}" ] && source "${keychain_init}"

  echo "Executing: cmd on ${remote_hosts[*]}"
  for rhost in "${remote_hosts[@]}"; do
    {
      { ssh -A -q -t "${rhost}" "${remote_command}" 2>&1 1>&3 3>&- || echo "${rhost} connect error $?" |
        awk -v pfx="${rhost}" '{printf "%30s :: ERROR %s\n", pfx, $0}'; } 3>&1 1>&2 |
        awk -v pfx="${rhost}" '{printf "%30s ::       %s\n", pfx, $0}'
    } &
    pids+=($!)
  done

  for pid in "${pids[@]}"; do
    wait "$pid"
  done
}

## Usage: get_srv_hostnames [-s dns_server] "service"
#
# Example
#
# hosts=($(get_srv_hostnames "_http._tcp.example.com"))
# hosts=($(get_srv_hostnames -s "8.8.8.8" "_http._tcp.example.com"))
# execute_remote_command "uptime" "${hosts[@]}"

function get_srv_hostnames {
  local dns_server=""
  local service=""
  local OPTIND

  while getopts "s:" opt; do
    case $opt in
    s)
      dns_server="$OPTARG"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      return 1
      ;;
    esac
  done
  shift $((OPTIND - 1))

  service="${1:?missing service}"

  if [[ -n "$dns_server" ]]; then
    dig +short SRV "@${dns_server}" "${service}"
  else
    dig +short SRV "${service}"
  fi |
    awk '{print $4}' |
    sed 's/\.$//g' |
    grep -v '^$' |
    tr '\n' ' '
}
