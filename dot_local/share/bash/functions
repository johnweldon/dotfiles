#!/usr/bin/env bash

## Usage: execute_remote_command "command" "host1" "host2" ...
#
# Example
#
# updated="${1:?missing token}"
# hosts=(host1 host2)
#
# remote_command=$(
#  cat <<EOF
#  grep -qs 'GITHUB_TOKEN' ~/.local.bashrc && (
#    grep -qs 'GITHUB_TOKEN=${updated}' ~/.local.bashrc && (
#      echo "already up to date"
#    ) || (
#      echo "updating"
#      sed -i.bak -e 's/export GITHUB_TOKEN=.*/export GITHUB_TOKEN=${updated}/g' ~/.local.bashrc
#    )
#  ) || echo "skipping"
# EOF
#)
#
# execute_remote_command "${remote_command}" "${hosts[@]}"

function execute_remote_command {
  local remote_command="${1:-uptime}"
  shift || :
  local remote_hosts=("$@")
  local pids=()

  local keychain_init="${HOME}/.keychain/${HOSTNAME}-sh"
  # shellcheck disable=SC1090
  [ -f "${keychain_init}" ] && source "${keychain_init}"

  echo "Executing: cmd on ${remote_hosts[*]}"
  for rhost in "${remote_hosts[@]}"; do
    {
      { ssh -A -q -t "${rhost}" "${remote_command}" 2>&1 1>&3 3>&- || echo "${rhost} connect error $?" |
        awk -v pfx="${rhost}" '{printf "%15s :: ERROR %s\n", pfx, $0}'; } 3>&1 1>&2 |
        awk -v pfx="${rhost}" '{printf "%15s ::       %s\n", pfx, $0}'
    } &
    pids+=($!)
  done

  for pid in "${pids[@]}"; do
    wait "$pid"
  done
}
